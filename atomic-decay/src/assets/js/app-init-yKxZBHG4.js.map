{"version":3,"file":"app-init-yKxZBHG4.js","sources":["../../../node_modules/@atomicjolt/lti-client/dist/html/cookie_error.js","../../../node_modules/@atomicjolt/lti-client/dist/libs/lti_storage_launch.js","../../../node_modules/@atomicjolt/lti-client/dist/client/init.js","../../../client/app-init.ts"],"sourcesContent":["import i18next from \"i18next\";\nimport { privacyHtml } from \"./privacy\";\nimport { MAIN_CONTENT_ID } from \"../libs/constants\";\nexport function showCookieError(settings) {\n    const container = document.getElementById(MAIN_CONTENT_ID);\n    if (!container) {\n        throw i18next.t(\"Could not find main-content element\");\n    }\n    container.innerHTML = `\n    <div id=\"cookie_error\" class=\"aj-centered-message\">\n      <h1 class=\"aj-title\">\n        <i class=\"material-icons-outlined aj-icon\" aria-hidden=\"true\">cookie_off</i>\n        ${i18next.t(\"Cookies Required\")}\n      </h1>\n      <p class=\"aj-text\">\n        ${privacyHtml(settings)}\n      </p>\n      <p class=\"aj-text\">\n        ${i18next.t(\"Please check your browser settings and enable cookies.\")}\n      </p>\n    </div>\n  `;\n}\n//# sourceMappingURL=cookie_error.js.map","import { hasStorageAccessAPI } from \"./platform_storage\";\nimport { hasCookie } from \"./cookies\";\nimport { storeState } from \"./platform_storage\";\nimport { showLaunchNewWindow } from \"../html/launch_new_window\";\nimport { showCookieError } from \"../html/cookie_error\";\nexport async function ltiStorageLaunch(settings) {\n    let submitToPlatform = () => {\n        window.location.replace(settings.responseUrl);\n    };\n    if (hasCookie(settings)) {\n        // We have cookies\n        return submitToPlatform();\n    }\n    if (settings.ltiStorageParams) {\n        // We have lti postMessage storage\n        try {\n            await storeState(settings.state, settings.ltiStorageParams);\n            return submitToPlatform();\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    if (window.self !== window.top) {\n        let showRequestStorageAccess = false;\n        if (hasStorageAccessAPI()) {\n            // We have storage access API, which will work for Safari as long as the\n            // user already has used the application in the top layer and it set a cookie.\n            try {\n                let hasAccess = await document.hasStorageAccess();\n                if (!hasAccess) {\n                    showRequestStorageAccess = true;\n                }\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n        showLaunchNewWindow(settings, {\n            showRequestStorageAccess,\n            disableLaunch: false,\n            showStorageAccessDenied: false,\n        });\n    }\n    else {\n        showCookieError(settings);\n    }\n}\n//# sourceMappingURL=lti_storage_launch.js.map","import i18next from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { ltiStorageLaunch } from \"../libs/lti_storage_launch\";\nimport es from \"../locale/es.json\";\nimport fr from \"../locale/fr.json\";\nimport { MAIN_CONTENT_ID } from \"../libs/constants\";\nfunction showError() {\n    const container = document.getElementById(MAIN_CONTENT_ID);\n    if (!container) {\n        throw \"Could not find main-content element\";\n    }\n    container.innerHTML += `\n    <div class=\"u-flex aj-centered-message\">\n      <i class=\"material-icons-outlined aj-icon\" aria-hidden=\"true\">warning</i>\n      <p class=\"aj-text translate\">\n        ${i18next.t(\"There was an error launching the LTI tool. Please reload and try again.\")}\n      </p>\n    </div>\n  `;\n}\nexport function initOIDCLaunch(settings) {\n    let isLaunched = false;\n    i18next.use(LanguageDetector).init({\n        detection: { order: [\"querystring\", \"navigator\"] },\n        fallbackLng: \"en\",\n        keySeparator: false,\n    });\n    i18next.addResourceBundle(\"es\", \"translation\", es);\n    i18next.addResourceBundle(\"fr\", \"translation\", fr);\n    i18next.changeLanguage();\n    window.addEventListener(\"load\", () => {\n        ltiStorageLaunch(settings);\n        isLaunched = true;\n    });\n    setTimeout(() => {\n        if (!isLaunched) {\n            showError();\n        }\n    }, 5000);\n}\n//# sourceMappingURL=init.js.map","import { initOIDCLaunch } from '@atomicjolt/lti-client';\nimport type { InitSettings } from '@atomicjolt/lti-client/types';\n\nconst initSettings: InitSettings = window.INIT_SETTINGS;\ninitOIDCLaunch(initSettings);\n"],"names":["showCookieError","settings","container","MAIN_CONTENT_ID","i18next","privacyHtml","ltiStorageLaunch","submitToPlatform","hasCookie","storeState","e","showRequestStorageAccess","hasStorageAccessAPI","showLaunchNewWindow","showError","initOIDCLaunch","isLaunched","LanguageDetector","es","fr","initSettings"],"mappings":"yFAGO,SAASA,EAAgBC,EAAU,CACtC,MAAMC,EAAY,SAAS,eAAeC,CAAe,EACzD,GAAI,CAACD,EACD,MAAME,EAAQ,EAAE,qCAAqC,EAEzDF,EAAU,UAAY;AAAA;AAAA;AAAA;AAAA,UAIhBE,EAAQ,EAAE,kBAAkB,CAAC;AAAA;AAAA;AAAA,UAG7BC,EAAYJ,CAAQ,CAAC;AAAA;AAAA;AAAA,UAGrBG,EAAQ,EAAE,wDAAwD,CAAC;AAAA;AAAA;AAAA,GAI7E,CCjBO,eAAeE,EAAiBL,EAAU,CAC7C,IAAIM,EAAmB,IAAM,CACzB,OAAO,SAAS,QAAQN,EAAS,WAAW,CAChD,EACA,GAAIO,EAAUP,CAAQ,EAElB,OAAOM,EAAgB,EAE3B,GAAIN,EAAS,iBAET,GAAI,CACA,aAAMQ,EAAWR,EAAS,MAAOA,EAAS,gBAAgB,EACnDM,EAAgB,CAC3B,OACOG,EAAG,CACN,QAAQ,MAAMA,CAAC,CACnB,CAEJ,GAAI,OAAO,OAAS,OAAO,IAAK,CAC5B,IAAIC,EAA2B,GAC/B,GAAIC,EAAmB,EAGnB,GAAI,CACgB,MAAM,SAAS,iBAAgB,IAE3CD,EAA2B,GAEnC,OACOD,EAAG,CACN,QAAQ,IAAIA,CAAC,CACjB,CAEJG,EAAoBZ,EAAU,CAC1B,yBAAAU,EACA,cAAe,GACf,wBAAyB,EACrC,CAAS,CACL,MAEIX,EAAgBC,CAAQ,CAEhC,4uGCzCA,SAASa,GAAY,CACjB,MAAMZ,EAAY,SAAS,eAAeC,CAAe,EACzD,GAAI,CAACD,EACD,KAAM,sCAEVA,EAAU,WAAa;AAAA;AAAA;AAAA;AAAA,UAIjBE,EAAQ,EAAE,yEAAyE,CAAC;AAAA;AAAA;AAAA,GAI9F,CACO,SAASW,EAAed,EAAU,CACrC,IAAIe,EAAa,GACjBZ,EAAQ,IAAIa,CAAgB,EAAE,KAAK,CAC/B,UAAW,CAAE,MAAO,CAAC,cAAe,WAAW,CAAC,EAChD,YAAa,KACb,aAAc,EACtB,CAAK,EACDb,EAAQ,kBAAkB,KAAM,cAAec,CAAE,EACjDd,EAAQ,kBAAkB,KAAM,cAAee,CAAE,EACjDf,EAAQ,eAAc,EACtB,OAAO,iBAAiB,OAAQ,IAAM,CAClCE,EAAiBL,CAAQ,EACzBe,EAAa,EACjB,CAAC,EACD,WAAW,IAAM,CACRA,GACDF,EAAS,CAEjB,EAAG,GAAI,CACX,CCpCA,MAAMM,EAA6B,OAAO,cAC1CL,EAAeK,CAAY","x_google_ignoreList":[0,1,2]}